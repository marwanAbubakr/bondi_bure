{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n/*\n  --when i send reqest.. ther there evet happen\n\n  1/ start reqest \n  2/ success\n  3/ eroor\n  --- and i will create there action to there event\n*/\n// export const addUser = createAsyncThunk('users/add', async (user) => {\n//   const res = await axios.post('http://localhost:5000/api/users', user)\n//   return res.data\n// })\n\nexport const userSlice = createSlice({\n  // i create a slice to take action and state in the same place\n  name: 'user',\n  initialState: {\n    userData: {\n      name: '',\n      email: ''\n    },\n    loading: false,\n    seccess: null,\n    error: false\n  },\n  // this action\n  reducers: {\n    addUser: (state, action) => {\n      state.name = action.payload.name;\n      state.email = action.payload.email;\n    },\n    // -- 1/ when event start\n    startUser: state => {\n      state.loading = true;\n    },\n    // when event seccess\n    seccessUser: (state, action) => {\n      //-- 2/ when the data recive to my i put it in useData\n      state.userData = action.payload; // if data already back to my this means loading = false\n\n      state.loading = false;\n    },\n    //-- 3/ when fonud error\n    errorUser: state => {\n      state.loading = false;\n      state.error = true;\n    }\n  } // new method use reduc thunk\n  // extraReducers: {\n  //   // when start\n  //   [addUser.pending]: (state) => {\n  //     state.loading = true\n  //   },\n  // },\n  // // when event seccess\n  // [addUser.fulfilled]: (state, action) => {\n  //   state.userData = action.payload\n  //   state.loading = false\n  // },\n  // // when fonud error\n  // [addUser.rejected]: (state) => {\n  //   state.loading = false\n  //   state.error = true\n  // },\n\n});\nexport const {\n  startUser,\n  seccessUser,\n  errorUser\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/media/marwanhero/HDD-STORE/Templates/My-Project/Web_2022/Redux-Toolkit/api-teamplate/redux-app/src/redux/userSlice.js"],"names":["createAsyncThunk","createSlice","axios","userSlice","name","initialState","userData","email","loading","seccess","error","reducers","addUser","state","action","payload","startUser","seccessUser","errorUser","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACnC;AACAG,EAAAA,IAAI,EAAE,MAF6B;AAGnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,IAAI,EAAE,EADE;AAERG,MAAAA,KAAK,EAAE;AAFC,KADE;AAKZC,IAAAA,OAAO,EAAE,KALG;AAMZC,IAAAA,OAAO,EAAE,IANG;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAHqB;AAYnC;AACAC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeX,IAA5B;AACAS,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;AACD,KAJO;AAKR;AACAS,IAAAA,SAAS,EAAGH,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KARO;AASR;AACAS,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC9B;AACAD,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,MAAM,CAACC,OAAxB,CAF8B,CAG9B;;AACAF,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAfO;AAgBR;AACAU,IAAAA,SAAS,EAAGL,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACD;AApBO,GAbyB,CAmCnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AApDmC,CAAD,CAA7B;AAsDP,OAAO,MAAM;AAAEM,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA;AAA1B,IAAwCf,SAAS,CAACgB,OAAxD;AAEP,eAAehB,SAAS,CAACiB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport axios from 'axios'\n/*\n  --when i send reqest.. ther there evet happen\n\n  1/ start reqest \n  2/ success\n  3/ eroor\n  --- and i will create there action to there event\n*/\n// export const addUser = createAsyncThunk('users/add', async (user) => {\n//   const res = await axios.post('http://localhost:5000/api/users', user)\n//   return res.data\n// })\nexport const userSlice = createSlice({\n  // i create a slice to take action and state in the same place\n  name: 'user',\n  initialState: {\n    userData: {\n      name: '',\n      email: '',\n    },\n    loading: false,\n    seccess: null,\n    error: false,\n  },\n  // this action\n  reducers: {\n    addUser: (state, action) => {\n      state.name = action.payload.name\n      state.email = action.payload.email\n    },\n    // -- 1/ when event start\n    startUser: (state) => {\n      state.loading = true\n    },\n    // when event seccess\n    seccessUser: (state, action) => {\n      //-- 2/ when the data recive to my i put it in useData\n      state.userData = action.payload\n      // if data already back to my this means loading = false\n      state.loading = false\n    },\n    //-- 3/ when fonud error\n    errorUser: (state) => {\n      state.loading = false\n      state.error = true\n    },\n  },\n  // new method use reduc thunk\n  // extraReducers: {\n  //   // when start\n  //   [addUser.pending]: (state) => {\n  //     state.loading = true\n  //   },\n  // },\n  // // when event seccess\n  // [addUser.fulfilled]: (state, action) => {\n  //   state.userData = action.payload\n  //   state.loading = false\n  // },\n  // // when fonud error\n\n  // [addUser.rejected]: (state) => {\n  //   state.loading = false\n  //   state.error = true\n  // },\n})\nexport const { startUser, seccessUser, errorUser } = userSlice.actions\n\nexport default userSlice.reducer\n"]},"metadata":{},"sourceType":"module"}