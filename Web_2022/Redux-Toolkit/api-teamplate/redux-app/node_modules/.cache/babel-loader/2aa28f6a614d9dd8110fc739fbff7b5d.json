{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n/*\n  --when i send reqest.. ther there evet happen\n\n  1/ start reqest \n  2/ success\n  3/ eroor\n  --- and i will create there action to there event\n*/\n\nexport const addUser = createAsyncThunk('users/add', async user => {\n  const res = await axios.post('http://localhost:5000/api/users', user);\n  return res.data;\n});\nexport const userSlice = createSlice({\n  // i create a slice to take action and state in the same place\n  name: 'counter',\n  initialState: {\n    userData: {\n      name: '',\n      email: ''\n    },\n    loading: false,\n    seccess: null,\n    error: false\n  },\n  // this action\n  reducers: {// addUser: (state, action) => {\n    //   state.name = action.payload.name\n    //   state.email = action.payload.email\n    // },\n    //-- 1/ when event start\n    // startUser: (state) => {\n    //   state.loading = true\n    // },\n    // // when event seccess\n    // seccessUser: (state, action) => {\n    //   //-- 2/ when the data recive to my i put it in useData\n    //   state.userData = action.payload\n    //   // if data already back to my this means loading = false\n    //   state.loading = false\n    // },\n    // //-- 3/ when fonud error\n    // errorUser: (state) => {\n    //   state.loading = false\n    //   state.error = true\n    // },\n  },\n  // new method use reduc thunk\n  extraReducers: {\n    // when start\n    [addUser.pending]: state => {\n      state.loading = true;\n    }\n  },\n  // when event seccess\n  [addUser.fulfilled]: (state, action) => {\n    state.userData = action.payload;\n    state.loading = false;\n  },\n  // when fonud error\n  [addUser.rejected]: state => {\n    state.loading = false;\n    state.error = true;\n  }\n});\nexport const {} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/media/marwanhero/HDD-STORE/Templates/My-Project/Web_2022/Redux-Toolkit/redux-app/src/redux/userSlice.js"],"names":["createAsyncThunk","createSlice","axios","addUser","user","res","post","data","userSlice","name","initialState","userData","email","loading","seccess","error","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAGH,gBAAgB,CAAC,WAAD,EAAc,MAAOI,IAAP,IAAgB;AACnE,QAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,iCAAX,EAA8CF,IAA9C,CAAlB;AACA,SAAOC,GAAG,CAACE,IAAX;AACD,CAHsC,CAAhC;AAIP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACnC;AACAQ,EAAAA,IAAI,EAAE,SAF6B;AAGnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,IAAI,EAAE,EADE;AAERG,MAAAA,KAAK,EAAE;AAFC,KADE;AAKZC,IAAAA,OAAO,EAAE,KALG;AAMZC,IAAAA,OAAO,EAAE,IANG;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAHqB;AAYnC;AACAC,EAAAA,QAAQ,EAAE,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBQ,GAbyB;AAmCnC;AACAC,EAAAA,aAAa,EAAE;AACb;AACA,KAACd,OAAO,CAACe,OAAT,GAAoBC,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD;AAJY,GApCoB;AA0CnC;AACA,GAACV,OAAO,CAACiB,SAAT,GAAqB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACtCF,IAAAA,KAAK,CAACR,QAAN,GAAiBU,MAAM,CAACC,OAAxB;AACAH,IAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD,GA9CkC;AA+CnC;AAEA,GAACV,OAAO,CAACoB,QAAT,GAAqBJ,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,IAAAA,KAAK,CAACJ,KAAN,GAAc,IAAd;AACD;AApDkC,CAAD,CAA7B;AAsDP,OAAO,MAAM,KAAKP,SAAS,CAACgB,OAArB;AAEP,eAAehB,SAAS,CAACiB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport axios from 'axios'\n/*\n  --when i send reqest.. ther there evet happen\n\n  1/ start reqest \n  2/ success\n  3/ eroor\n  --- and i will create there action to there event\n*/\nexport const addUser = createAsyncThunk('users/add', async (user) => {\n  const res = await axios.post('http://localhost:5000/api/users', user)\n  return res.data\n})\nexport const userSlice = createSlice({\n  // i create a slice to take action and state in the same place\n  name: 'counter',\n  initialState: {\n    userData: {\n      name: '',\n      email: '',\n    },\n    loading: false,\n    seccess: null,\n    error: false,\n  },\n  // this action\n  reducers: {\n    // addUser: (state, action) => {\n    //   state.name = action.payload.name\n    //   state.email = action.payload.email\n    // },\n    //-- 1/ when event start\n    // startUser: (state) => {\n    //   state.loading = true\n    // },\n    // // when event seccess\n    // seccessUser: (state, action) => {\n    //   //-- 2/ when the data recive to my i put it in useData\n    //   state.userData = action.payload\n    //   // if data already back to my this means loading = false\n    //   state.loading = false\n    // },\n    // //-- 3/ when fonud error\n    // errorUser: (state) => {\n    //   state.loading = false\n    //   state.error = true\n    // },\n  },\n  // new method use reduc thunk\n  extraReducers: {\n    // when start\n    [addUser.pending]: (state) => {\n      state.loading = true\n    },\n  },\n  // when event seccess\n  [addUser.fulfilled]: (state, action) => {\n    state.userData = action.payload\n    state.loading = false\n  },\n  // when fonud error\n\n  [addUser.rejected]: (state) => {\n    state.loading = false\n    state.error = true\n  },\n})\nexport const {} = userSlice.actions\n\nexport default userSlice.reducer\n"]},"metadata":{},"sourceType":"module"}